// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: query.sql

package dbgen

import (
	"context"
	"database/sql"
	"time"
)

const createAIPerson = `-- name: CreateAIPerson :one
insert into ai_persons (user_id, name, context_prompt) values ($1, $2, $3) returning id, user_id, name, context_prompt
`

type CreateAIPersonParams struct {
	UserID        int64
	Name          string
	ContextPrompt string
}

func (q *Queries) CreateAIPerson(ctx context.Context, arg CreateAIPersonParams) (AiPerson, error) {
	row := q.db.QueryRowContext(ctx, createAIPerson, arg.UserID, arg.Name, arg.ContextPrompt)
	var i AiPerson
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.ContextPrompt,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
insert into users (name, password, status) values ($1, $2, $3) returning id, name, password, status, challenge
`

type CreateUserParams struct {
	Name     string
	Password sql.NullString
	Status   string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Name, arg.Password, arg.Status)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Password,
		&i.Status,
		&i.Challenge,
	)
	return i, err
}

const createVoiceModel = `-- name: CreateVoiceModel :one
insert into voice_models (voice_sample_id, status, file_name, timestamp) values ($1, $2, $3, $4) returning id, voice_sample_id, status, file_name, timestamp
`

type CreateVoiceModelParams struct {
	VoiceSampleID int64
	Status        string
	FileName      sql.NullString
	Timestamp     time.Time
}

func (q *Queries) CreateVoiceModel(ctx context.Context, arg CreateVoiceModelParams) (VoiceModel, error) {
	row := q.db.QueryRowContext(ctx, createVoiceModel,
		arg.VoiceSampleID,
		arg.Status,
		arg.FileName,
		arg.Timestamp,
	)
	var i VoiceModel
	err := row.Scan(
		&i.ID,
		&i.VoiceSampleID,
		&i.Status,
		&i.FileName,
		&i.Timestamp,
	)
	return i, err
}

const createVoiceSample = `-- name: CreateVoiceSample :one
insert into voice_samples (ai_person_id, file_name, timestamp) values ($1, $2, $3) returning id, ai_person_id, file_name, timestamp
`

type CreateVoiceSampleParams struct {
	AiPersonID int64
	FileName   sql.NullString
	Timestamp  time.Time
}

func (q *Queries) CreateVoiceSample(ctx context.Context, arg CreateVoiceSampleParams) (VoiceSample, error) {
	row := q.db.QueryRowContext(ctx, createVoiceSample, arg.AiPersonID, arg.FileName, arg.Timestamp)
	var i VoiceSample
	err := row.Scan(
		&i.ID,
		&i.AiPersonID,
		&i.FileName,
		&i.Timestamp,
	)
	return i, err
}

const getUserByName = `-- name: GetUserByName :one
select id, name, password, status, challenge from users where name = $1 limit 1
`

func (q *Queries) GetUserByName(ctx context.Context, name string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByName, name)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Password,
		&i.Status,
		&i.Challenge,
	)
	return i, err
}

const getVoiceModelByVoiceSample = `-- name: GetVoiceModelByVoiceSample :one
select id, voice_sample_id, status, file_name, timestamp from voice_models where voice_sample_id = $1
`

func (q *Queries) GetVoiceModelByVoiceSample(ctx context.Context, voiceSampleID int64) (VoiceModel, error) {
	row := q.db.QueryRowContext(ctx, getVoiceModelByVoiceSample, voiceSampleID)
	var i VoiceModel
	err := row.Scan(
		&i.ID,
		&i.VoiceSampleID,
		&i.Status,
		&i.FileName,
		&i.Timestamp,
	)
	return i, err
}

const listAIPersons = `-- name: ListAIPersons :many
select id, user_id, name, context_prompt from ai_persons where user_id = $1 order by id
`

func (q *Queries) ListAIPersons(ctx context.Context, userID int64) ([]AiPerson, error) {
	rows, err := q.db.QueryContext(ctx, listAIPersons, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AiPerson
	for rows.Next() {
		var i AiPerson
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.ContextPrompt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listVoiceSamples = `-- name: ListVoiceSamples :many
select id, ai_person_id, file_name, timestamp from voice_samples where ai_person_id = $1 order by id
`

func (q *Queries) ListVoiceSamples(ctx context.Context, aiPersonID int64) ([]VoiceSample, error) {
	rows, err := q.db.QueryContext(ctx, listVoiceSamples, aiPersonID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []VoiceSample
	for rows.Next() {
		var i VoiceSample
		if err := rows.Scan(
			&i.ID,
			&i.AiPersonID,
			&i.FileName,
			&i.Timestamp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAIPersonContextPromptByID = `-- name: UpdateAIPersonContextPromptByID :exec
update ai_persons set context_prompt = $1 where id = $2
`

type UpdateAIPersonContextPromptByIDParams struct {
	ContextPrompt string
	ID            int64
}

func (q *Queries) UpdateAIPersonContextPromptByID(ctx context.Context, arg UpdateAIPersonContextPromptByIDParams) error {
	_, err := q.db.ExecContext(ctx, updateAIPersonContextPromptByID, arg.ContextPrompt, arg.ID)
	return err
}

const updateVoiceModelStatusByID = `-- name: UpdateVoiceModelStatusByID :exec
update voice_models set status = $1 where id = $2
`

type UpdateVoiceModelStatusByIDParams struct {
	Status string
	ID     int64
}

func (q *Queries) UpdateVoiceModelStatusByID(ctx context.Context, arg UpdateVoiceModelStatusByIDParams) error {
	_, err := q.db.ExecContext(ctx, updateVoiceModelStatusByID, arg.Status, arg.ID)
	return err
}
