// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: query.sql

package dbgen

import (
	"context"
	"database/sql"
	"time"
)

const createAIPerson = `-- name: CreateAIPerson :one
insert into ai_persons (user_id, name, context_prompt) values ($1, $2, $3) returning id, user_id, name, context_prompt
`

type CreateAIPersonParams struct {
	UserID        int64
	Name          string
	ContextPrompt string
}

func (q *Queries) CreateAIPerson(ctx context.Context, arg CreateAIPersonParams) (AiPerson, error) {
	row := q.db.QueryRowContext(ctx, createAIPerson, arg.UserID, arg.Name, arg.ContextPrompt)
	var i AiPerson
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.ContextPrompt,
	)
	return i, err
}

const createAIPersonReply = `-- name: CreateAIPersonReply :one
insert into ai_person_replies (user_prompt_id, status, message, timestamp) values ($1, $2, $3, $4) returning id, user_prompt_id, status, message, timestamp
`

type CreateAIPersonReplyParams struct {
	UserPromptID int64
	Status       string
	Message      string
	Timestamp    time.Time
}

func (q *Queries) CreateAIPersonReply(ctx context.Context, arg CreateAIPersonReplyParams) (AiPersonReply, error) {
	row := q.db.QueryRowContext(ctx, createAIPersonReply,
		arg.UserPromptID,
		arg.Status,
		arg.Message,
		arg.Timestamp,
	)
	var i AiPersonReply
	err := row.Scan(
		&i.ID,
		&i.UserPromptID,
		&i.Status,
		&i.Message,
		&i.Timestamp,
	)
	return i, err
}

const createAIPersonReplyVoice = `-- name: CreateAIPersonReplyVoice :one
insert into ai_person_reply_voices (ai_person_reply_id, status, file_name) values ($1, $2, $3) returning id, ai_person_reply_id, status, file_name
`

type CreateAIPersonReplyVoiceParams struct {
	AiPersonReplyID int64
	Status          string
	FileName        sql.NullString
}

func (q *Queries) CreateAIPersonReplyVoice(ctx context.Context, arg CreateAIPersonReplyVoiceParams) (AiPersonReplyVoice, error) {
	row := q.db.QueryRowContext(ctx, createAIPersonReplyVoice, arg.AiPersonReplyID, arg.Status, arg.FileName)
	var i AiPersonReplyVoice
	err := row.Scan(
		&i.ID,
		&i.AiPersonReplyID,
		&i.Status,
		&i.FileName,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
insert into users (name, password, status) values ($1, $2, $3) returning id, name, password, status, challenge
`

type CreateUserParams struct {
	Name     string
	Password sql.NullString
	Status   string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Name, arg.Password, arg.Status)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Password,
		&i.Status,
		&i.Challenge,
	)
	return i, err
}

const createUserPrompt = `-- name: CreateUserPrompt :one
insert into user_prompts (ai_person_id, timestamp) values ($1, $2) returning id, ai_person_id, timestamp
`

type CreateUserPromptParams struct {
	AiPersonID int64
	Timestamp  time.Time
}

func (q *Queries) CreateUserPrompt(ctx context.Context, arg CreateUserPromptParams) (UserPrompt, error) {
	row := q.db.QueryRowContext(ctx, createUserPrompt, arg.AiPersonID, arg.Timestamp)
	var i UserPrompt
	err := row.Scan(&i.ID, &i.AiPersonID, &i.Timestamp)
	return i, err
}

const createUserTextPrompt = `-- name: CreateUserTextPrompt :one
insert into user_text_prompts (user_prompt_id, message) values ($1, $2) returning id, user_prompt_id, message
`

type CreateUserTextPromptParams struct {
	UserPromptID int64
	Message      string
}

func (q *Queries) CreateUserTextPrompt(ctx context.Context, arg CreateUserTextPromptParams) (UserTextPrompt, error) {
	row := q.db.QueryRowContext(ctx, createUserTextPrompt, arg.UserPromptID, arg.Message)
	var i UserTextPrompt
	err := row.Scan(&i.ID, &i.UserPromptID, &i.Message)
	return i, err
}

const createUserVoicePrompt = `-- name: CreateUserVoicePrompt :one
insert into user_voice_prompts (user_prompt_id, status, file_name, transcription) values ($1, $2, $3, $4) returning id, user_prompt_id, status, file_name, transcription
`

type CreateUserVoicePromptParams struct {
	UserPromptID  int64
	Status        string
	FileName      string
	Transcription sql.NullString
}

func (q *Queries) CreateUserVoicePrompt(ctx context.Context, arg CreateUserVoicePromptParams) (UserVoicePrompt, error) {
	row := q.db.QueryRowContext(ctx, createUserVoicePrompt,
		arg.UserPromptID,
		arg.Status,
		arg.FileName,
		arg.Transcription,
	)
	var i UserVoicePrompt
	err := row.Scan(
		&i.ID,
		&i.UserPromptID,
		&i.Status,
		&i.FileName,
		&i.Transcription,
	)
	return i, err
}

const createVoiceModel = `-- name: CreateVoiceModel :one
insert into voice_models (voice_sample_id, status, file_name, timestamp) values ($1, $2, $3, $4) returning id, voice_sample_id, status, file_name, timestamp
`

type CreateVoiceModelParams struct {
	VoiceSampleID int64
	Status        string
	FileName      sql.NullString
	Timestamp     time.Time
}

func (q *Queries) CreateVoiceModel(ctx context.Context, arg CreateVoiceModelParams) (VoiceModel, error) {
	row := q.db.QueryRowContext(ctx, createVoiceModel,
		arg.VoiceSampleID,
		arg.Status,
		arg.FileName,
		arg.Timestamp,
	)
	var i VoiceModel
	err := row.Scan(
		&i.ID,
		&i.VoiceSampleID,
		&i.Status,
		&i.FileName,
		&i.Timestamp,
	)
	return i, err
}

const createVoiceSample = `-- name: CreateVoiceSample :one
insert into voice_samples (ai_person_id, file_name, timestamp) values ($1, $2, $3) returning id, ai_person_id, file_name, timestamp
`

type CreateVoiceSampleParams struct {
	AiPersonID int64
	FileName   sql.NullString
	Timestamp  time.Time
}

func (q *Queries) CreateVoiceSample(ctx context.Context, arg CreateVoiceSampleParams) (VoiceSample, error) {
	row := q.db.QueryRowContext(ctx, createVoiceSample, arg.AiPersonID, arg.FileName, arg.Timestamp)
	var i VoiceSample
	err := row.Scan(
		&i.ID,
		&i.AiPersonID,
		&i.FileName,
		&i.Timestamp,
	)
	return i, err
}

const getAIPerson = `-- name: GetAIPerson :one
select id, user_id, name, context_prompt from ai_persons where id = $1
`

func (q *Queries) GetAIPerson(ctx context.Context, id int64) (AiPerson, error) {
	row := q.db.QueryRowContext(ctx, getAIPerson, id)
	var i AiPerson
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.ContextPrompt,
	)
	return i, err
}

const getLatestVoiceModel = `-- name: GetLatestVoiceModel :one
select m.id as id, m.status as status, m.file_name as file_name, m.timestamp as timestamp,
a.user_id as user_id, a.name as ai_name, a.context_prompt as ai_context_prompt
from voice_models m
join voice_samples s on m.voice_sample_id = m.id
join ai_persons a on s.ai_person_id = a.id and a.id = $1
order by m.timestamp desc
limit 1
`

type GetLatestVoiceModelRow struct {
	ID              int64
	Status          string
	FileName        sql.NullString
	Timestamp       time.Time
	UserID          int64
	AiName          string
	AiContextPrompt string
}

func (q *Queries) GetLatestVoiceModel(ctx context.Context, id int64) (GetLatestVoiceModelRow, error) {
	row := q.db.QueryRowContext(ctx, getLatestVoiceModel, id)
	var i GetLatestVoiceModelRow
	err := row.Scan(
		&i.ID,
		&i.Status,
		&i.FileName,
		&i.Timestamp,
		&i.UserID,
		&i.AiName,
		&i.AiContextPrompt,
	)
	return i, err
}

const getUserByName = `-- name: GetUserByName :one
select id, name, password, status, challenge from users where name = $1 limit 1
`

func (q *Queries) GetUserByName(ctx context.Context, name string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByName, name)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Password,
		&i.Status,
		&i.Challenge,
	)
	return i, err
}

const getVoiceModelByVoiceSample = `-- name: GetVoiceModelByVoiceSample :one
select id, voice_sample_id, status, file_name, timestamp from voice_models where voice_sample_id = $1
`

func (q *Queries) GetVoiceModelByVoiceSample(ctx context.Context, voiceSampleID int64) (VoiceModel, error) {
	row := q.db.QueryRowContext(ctx, getVoiceModelByVoiceSample, voiceSampleID)
	var i VoiceModel
	err := row.Scan(
		&i.ID,
		&i.VoiceSampleID,
		&i.Status,
		&i.FileName,
		&i.Timestamp,
	)
	return i, err
}

const getVoiceSampleByID = `-- name: GetVoiceSampleByID :one
select id, ai_person_id, file_name, timestamp from voice_samples where id = $1 limit 1
`

func (q *Queries) GetVoiceSampleByID(ctx context.Context, id int64) (VoiceSample, error) {
	row := q.db.QueryRowContext(ctx, getVoiceSampleByID, id)
	var i VoiceSample
	err := row.Scan(
		&i.ID,
		&i.AiPersonID,
		&i.FileName,
		&i.Timestamp,
	)
	return i, err
}

const listAIPersons = `-- name: ListAIPersons :many
select id, user_id, name, context_prompt from ai_persons where user_id = $1 order by id
`

func (q *Queries) ListAIPersons(ctx context.Context, userID int64) ([]AiPerson, error) {
	rows, err := q.db.QueryContext(ctx, listAIPersons, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AiPerson
	for rows.Next() {
		var i AiPerson
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.ContextPrompt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listConversations = `-- name: ListConversations :many
select u.id as id, u.ai_person_id as ai_person_id, u.timestamp as timestamp,
t.message as text_message,
v.status as voice_status, v.file_name as voice_filename, v.transcription as voice_transcription,
r.status as reply_status, r.message as reply_message, r.timestamp as reply_timestamp,
rv.status as reply_voice_status, rv.file_name as reply_voice_filename
from user_prompts u
left outer join user_text_prompts t on t.user_prompt_id = u.id
left outer join user_voice_prompts v on v.user_prompt_id = u.id
left outer join ai_person_replies r on r.user_prompt_id = u.id
left outer join ai_person_reply_voices rv on rv.ai_person_reply_id = r.id
where ai_person_id = $1
`

type ListConversationsRow struct {
	ID                 int64
	AiPersonID         int64
	Timestamp          time.Time
	TextMessage        sql.NullString
	VoiceStatus        sql.NullString
	VoiceFilename      sql.NullString
	VoiceTranscription sql.NullString
	ReplyStatus        sql.NullString
	ReplyMessage       sql.NullString
	ReplyTimestamp     sql.NullTime
	ReplyVoiceStatus   sql.NullString
	ReplyVoiceFilename sql.NullString
}

func (q *Queries) ListConversations(ctx context.Context, aiPersonID int64) ([]ListConversationsRow, error) {
	rows, err := q.db.QueryContext(ctx, listConversations, aiPersonID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListConversationsRow
	for rows.Next() {
		var i ListConversationsRow
		if err := rows.Scan(
			&i.ID,
			&i.AiPersonID,
			&i.Timestamp,
			&i.TextMessage,
			&i.VoiceStatus,
			&i.VoiceFilename,
			&i.VoiceTranscription,
			&i.ReplyStatus,
			&i.ReplyMessage,
			&i.ReplyTimestamp,
			&i.ReplyVoiceStatus,
			&i.ReplyVoiceFilename,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsers = `-- name: ListUsers :many
select id, name, password, status, challenge from users
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Password,
			&i.Status,
			&i.Challenge,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listVoiceSamples = `-- name: ListVoiceSamples :many
select id, ai_person_id, file_name, timestamp from voice_samples where ai_person_id = $1 order by id
`

func (q *Queries) ListVoiceSamples(ctx context.Context, aiPersonID int64) ([]VoiceSample, error) {
	rows, err := q.db.QueryContext(ctx, listVoiceSamples, aiPersonID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []VoiceSample
	for rows.Next() {
		var i VoiceSample
		if err := rows.Scan(
			&i.ID,
			&i.AiPersonID,
			&i.FileName,
			&i.Timestamp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAIPersonContextPromptByID = `-- name: UpdateAIPersonContextPromptByID :exec
update ai_persons set context_prompt = $1 where id = $2
`

type UpdateAIPersonContextPromptByIDParams struct {
	ContextPrompt string
	ID            int64
}

func (q *Queries) UpdateAIPersonContextPromptByID(ctx context.Context, arg UpdateAIPersonContextPromptByIDParams) error {
	_, err := q.db.ExecContext(ctx, updateAIPersonContextPromptByID, arg.ContextPrompt, arg.ID)
	return err
}

const updateAIPersonReplyByID = `-- name: UpdateAIPersonReplyByID :exec
update ai_person_replies set status = $1 and message = $2 where id = $3
`

type UpdateAIPersonReplyByIDParams struct {
	Status  string
	Message string
	ID      int64
}

func (q *Queries) UpdateAIPersonReplyByID(ctx context.Context, arg UpdateAIPersonReplyByIDParams) error {
	_, err := q.db.ExecContext(ctx, updateAIPersonReplyByID, arg.Status, arg.Message, arg.ID)
	return err
}

const updateAIPersonReplyVoiceStatusByID = `-- name: UpdateAIPersonReplyVoiceStatusByID :exec
update ai_person_reply_voices set status = $1 where id = $2
`

type UpdateAIPersonReplyVoiceStatusByIDParams struct {
	Status string
	ID     int64
}

func (q *Queries) UpdateAIPersonReplyVoiceStatusByID(ctx context.Context, arg UpdateAIPersonReplyVoiceStatusByIDParams) error {
	_, err := q.db.ExecContext(ctx, updateAIPersonReplyVoiceStatusByID, arg.Status, arg.ID)
	return err
}

const updateUserVoicePromptStatusByID = `-- name: UpdateUserVoicePromptStatusByID :exec
update user_voice_prompts set status = $1 where id = $2
`

type UpdateUserVoicePromptStatusByIDParams struct {
	Status string
	ID     int64
}

func (q *Queries) UpdateUserVoicePromptStatusByID(ctx context.Context, arg UpdateUserVoicePromptStatusByIDParams) error {
	_, err := q.db.ExecContext(ctx, updateUserVoicePromptStatusByID, arg.Status, arg.ID)
	return err
}

const updateVoiceModelByID = `-- name: UpdateVoiceModelByID :exec
update voice_models set status = $1 where id = $2
`

type UpdateVoiceModelByIDParams struct {
	Status string
	ID     int64
}

func (q *Queries) UpdateVoiceModelByID(ctx context.Context, arg UpdateVoiceModelByIDParams) error {
	_, err := q.db.ExecContext(ctx, updateVoiceModelByID, arg.Status, arg.ID)
	return err
}
